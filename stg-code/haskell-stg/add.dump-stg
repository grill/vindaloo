sat_sqi :: GHC.Base.String
[LclId] =
    \u srt:(0,*bitmap*) []
        let {
          sat_sqg :: GHC.Integer.Type.Integer
          [LclId] =
              \u srt:(0,*bitmap*) []
                  let {
                    sat_sqd :: GHC.Integer.Type.Integer
                    [LclId] =
                        NO_CCS GHC.Integer.Type.S#! [2]; } in
                  let {
                    sat_sqe :: GHC.Integer.Type.Integer
                    [LclId] =
                        NO_CCS GHC.Integer.Type.S#! [1];
                  } in  GHC.Num.+ GHC.Num.$fNumInteger sat_sqe sat_sqd;
        } in  GHC.Show.show GHC.Show.$fShowInteger sat_sqg;
SRT(sat_sqi): [GHC.Num.$fNumInteger, GHC.Show.$fShowInteger]
Main.main :: GHC.Types.IO ()
[GblId] =
    \u srt:(0,*bitmap*) [] GHC.Base.$ System.IO.putStrLn sat_sqi;
SRT(Main.main): [GHC.Base.$, System.IO.putStrLn, sat_sqi]
:Main.main :: GHC.Types.IO ()
[GblId] =
    \u srt:(0,*bitmap*) [] GHC.TopHandler.runMainIO Main.main;
SRT(:Main.main): [GHC.TopHandler.runMainIO, Main.main]

